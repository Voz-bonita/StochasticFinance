---
title: "Análise de Ativos Financeiros"
subtitle: "Movimento Browniano Geométrico"
author: "José Vítor Barreto Porfirio 190089971"
date: "19/05/2025"
execute:
  echo: true
  output: true
format: 
  pdf:
    fig-width: 8
    fig-height: 4
    code-fold: true
header-includes:
  - \usepackage{indentfirst}
  - \usepackage{booktabs}
  - \usepackage{xcolor}
  - \setlength{\parindent}{10ex}
  - \renewcommand{\tablename}{Tabela}
  - \renewcommand{\figurename}{Figura}
classoption: a4paper, table
---

# Introdução



# Metodologia

## Ativo financeiro escolhido

O ativo financeiro escolhido foram as ações dadas pelo _ticker_ **PETR4**, ações ordiárias da empresa Petrobras, uma empresa de economia mista. Essa é uma empresa com grande participação no principal índice acionário do Brasil, o Ibovespa, com cerca de 4,34% de participação na data 18/05/2025. 

## Obtenção dos dados

Os dados foram obtidos a partir do Yahoo Finance por meio do pacote `quantmod` para todas as datas disponíveis no ano de 2024 para o período de ajuste do modelo, sendo que o ano de 2025 foi utilizado para avaliar as predições do modelo.
```{r}
pacman::p_load("ggplot2", "quantmod", "glue")

start_date <- as.Date("2024-01-01")
end_date <- as.Date("2024-12-31")

ticker_name <- "PETR4.SA"

getSymbols(ticker_name, from = start_date, to = end_date)
ticker <- get(ticker_name) # Ticker data

start_val_date <- end_date + 1
end_val_date <- Sys.Date()
ticker_val <- getSymbols(
    ticker_name,
    from = start_val_date, to = end_val_date,
    auto.assign = FALSE
)
```

# Resultados

## Análise Exploratória

A figura \ref{fig:ticker_series} mostra a evolução do ativo financeiro ao longo do ano de 2024 juntamente com o volume de transações. A evolução parece oscilar dentro de uma faixa para o ano de 2024, enquanto da figura \ref{fig:ticker_val_series} tem-se que ano de 2025 mostra mais variações com padrão de queda no valor nominal das cotas de PETR4, logo, sabe-se que o desafio do modelo será predizer uma situação visualmente diferente daquela que será ajustado.

```{r}
#| fig-cap: "\\label{fig:ticker_series}Evolução do valor de fechamento nominal de PETR4 ao longo de 2024."
options(repr.plot.width = 14, repr.plot.height = 8)
chartSeries(ticker, theme = chartTheme("black"), type = "line")
```

```{r}
#| fig-cap: "\\label{fig:ticker_val_series}Evolução do valor de fechamento nominal de PETR4 ao longo de 2025."
chartSeries(ticker_val, theme = chartTheme("black"), type = "line")
```


Para evitar comportamentos de tendência da série, procedeu-se numa breve análise dos retornos diários dada pela figura \ref{fig:return_exploratory}, em que observa-se do gráfico de linhas da densidade que a distribuição normal não teve um ajuste tão bom próximo ao pico de máxima verossimilhança da densidade real dos dados e as caldas parecen bem ajustadas, logo, isso indica que a teoria desenvolvida para retornos normalmente distribuídos talvez não seja adequada para essa análise e deveria-se recorrer a outra ferramenta como Teoria de Valores Extremais.

```{r fig.cap="\\label{fig:return_exploratory}Gráficos dos retornos diários nominais de PETR4 em 2024.", fig.height=8, fig.width=8}

daily_returns <- dailyReturn(Cl(ticker))
return_mu <- mean(daily_returns)
return_sd <- sd(daily_returns)

normal_fit_x <- seq(min(daily_returns), max(daily_returns), length.out = 100)
normal_fit_y <- dnorm(normal_fit_x, return_mu, return_sd)

par(mfrow = c(3, 1))
plot(daily_returns, main = glue("Daily Returns of {ticker_name}"))
hist(daily_returns, main = glue("Daily Returns of {ticker_name}"))
plot(density(daily_returns), type = "n") # invisible plot to separate lines
lines(density(daily_returns), col = "black", lwd = 2, )
lines(normal_fit_x, normal_fit_y, col = "red", lwd = 2)
par(mfrow = c(1, 1))
```

## Monte Carlo

Seguiu-se com a implementação do Movimento Browniano Geométrico a partir da solução de sua equação diferencial ordinária, bem como dos estimadores de máxima verossimilhança para um processo estocástico $S(t)$ qualquer.

```{r}
rgbm <- function(n, mu, sigma, s0 = 1, limit = 1) {
    # Uses SDE Solution
    t <- seq(0, limit, length.out = n)
    st <- s0 * exp((mu - sigma^2 / 2) * t + sigma * rnorm(n))
    return(st)
}

## Maximum Likelihood Estimators
estimators <- function(s, dt) {
    s <- as.numeric(s)
    x <- diff(log(s))
    sigma2_est <- (1 / dt) * var(x)
    mu_est <- (1 / dt) * mean(x) + (1 / 2) * sigma2_est^2
    return(c(mu_est, sigma2_est))
}


## Monte Carlo
n_train_obs <- dim(ticker)[1]
n_obs <- dim(ticker_val)[1]
num_simulations <- 100

### Model Params
par_est <- estimators(Cl(ticker), 1 / n_train_obs)
(mu_est <- par_est[1])
(sigma2_est <- par_est[2])
sigma_est <- sqrt(sigma2_est)
last_known_value <- xts::last(Cl(ticker))[[1]]
```

Para os parâmetros do modelo, $\mu$ e $\sigma$, obteve-se os estimadores
$$\hat{\mu} = `r mu_est`;~~ \hat{\sigma} = `r sigma2_est`$$

O coeficiente de *drift* obtido para a série apontara uma tendência de queda ao longo do tempo, o que parece promissor, pois é conhecido que o comportamento do ativo para o ano de 2025 foi com queda do seu valor nominal.

Com os parâmetros estimados do modelo à disposição, pode-se seguir para realizar simulações do processo com a utilização da técnica de Monte Carlo para obter as estimativas pontuais e os limites do intervalo de confiança empírico apresentado na figura \ref{fig:mc}.

```{r}
simmulations <- matrix(NA, nrow = n_obs, ncol = num_simulations)
for (i in 1:num_simulations) {
    sim_i <- rgbm(n_obs, mu_est, sigma_est, s0 = last_known_value)
    simmulations[, i] <- sim_i
}

### Mean path with intervals by quantiles
means <- rowMeans(simmulations)
lower_quantile <- apply(simmulations, 1, quantile, probs = 0.05)
upper_quantile <- apply(simmulations, 1, quantile, probs = 0.95)

means_xts <- xts::xts(means, order.by = index(ticker_val))
lower_xts <- xts::xts(lower_quantile, order.by = index(ticker_val))
upper_xts <- xts::xts(upper_quantile, order.by = index(ticker_val))
blank_xts <- xts::xts(
    1:(n_train_obs + n_obs),
    order.by = c(index(ticker), index(ticker_val))
)
```

Da figura \ref{fig:mc} observa-se o comportamento esperado pelo parâmetro de *drift* negativo obtido anteriormente, de forma que a simulação média dos dados parece se apróximar dos valores reais, de forma que o intervalo de confiança empírico cobriu a maior parte dos do preço real observado, mesmo no período de queda mais acentuada.
```{r fig.show='hide'}
### Plot true path vs simmulated path
plots_title <- glue("Simmulation path for {ticker_name}")
plots_ylim <- c(
    min(means, Cl(ticker_val), Cl(ticker), lower_quantile, upper_quantile),
    max(means, Cl(ticker_val), Cl(ticker), lower_quantile, upper_quantile)
)
plots_xlim <- c(index(ticker)[1], xts::last(index(ticker_val)))

plot(blank_xts, ylim = plots_ylim, type = "n", main = plots_title)
lines(Cl(ticker))
lines(means_xts, col = "red", lwd = 2)
lines(Cl(ticker_val), col = "royalblue", lwd = 2)
lines(lower_xts, col = "#ff5959")
```

```{r fig.cap="\\label{fig:mc}Gráfico de linhas da simulação de Monte Carlo para preço de fechamento de PETR4 em 2025 contra seu preço real."}
lines(upper_xts, col = "#ff5959")
```

## Análise do modelo

Após o ajuste do modelo, iniciou-se uma busca por padrões de autocorrelação da série não capturados pelo modelo, sempre sobre as séries diferenciadas. A figura \ref{fig:acf} aponta para autocorrelações contidas dentro das bandas de confiança, exceto para 1 dia de _lag_, indicando que há algum padrão de autocorrelação não detectado pelo modelo.

```{r fig.cap="\\label{fig:acf}Correlograma dos retornos diários para o preço de fechamento de PETR4 em 2025 e do modelo ajustado.", fig.height=8, fig.width=8}
par(mfrow = c(2, 1))
acf(
    dailyReturn(Cl(ticker_val)),
    main = "Autocorrelação dos Preços",
    lag.max = 500
)
acf(
    dailyReturn(means_xts),
    main = "Autocorrelação do modelo ajustado",
    lag.max = 500
)
par(mfrow = c(1, 1))
```

Como observou-se que os retornos não possuem comportamento tão bem adequado à distribuição normal, é esperado que os resíduos também não sejam normalmente distribuídos. 

Da figura \ref{fig:residual} tem-se que que os resíduos não parecem se ajustar à distruição normal, isso pode ser notado a partir do histograma, do qqplot e do histograma que mostra a mediana muito deslocada do ponto médio entre o primeiro e o terceiro quartil. O gráfico de linhas mostra que a grande o período da grande queda de preço teve um ajuste muito mais distante em magnitude que para o restante da série.

```{r fig.cap="\\label{fig:residual}Gráficos da análise de resíduos em 2025 para o modelo ajustado.", fig.height=8, fig.width=8}
residuals <- Cl(ticker_val) - means_xts
names(residuals) <- c("Residuals")
residuals$abline <- 0

par(mfrow = c(2, 2))

boxplot(
    residuals[, "Residuals"],
    ylab = "Residuals",
    main = "Boxplot of Residuals"
)

hist(
    residuals[, "Residuals"],
    breaks = 20,
    main = "Histogram of Residuals",
    xlab = "Residuals"
)

plot.zoo(
    residuals[, "Residuals"],
    type = "l",
    xlab = "Date", ylab = "Residuals",
    main = "Fitted Model Residuals"
)
lines(zoo(residuals[, "abline"]), col = "red", lwd = 2)

ecostats::qqenvelope(
    as.numeric(residuals[, "Residuals"]),
    ylab = "Randomized Quantile Residuals",
    main = "QQPlot Residuals"
)
qqline(residuals[, "Residuals"], col = 2)
par(mfrow = c(1, 1))
```

## Modelos Diários

Devido à presença da autocorrelação de 1 dia apontada pela figura \ref{fig:acf}, tentou-se uma segunda abordagem reajustando o modelo todos os dias com o novo valor obtido e aplicando o método de Monte Carlo.

A figura \ref{fig:mc_dbd} mostra um ajuste bem melhor para as previsões pontuais em comparação com a figura \ref{fig:mc}, isto é, o processo estocástico simulado parece acompanhar bem mais de perto a série real, embora ainda seja possível notar pontos em que o ajuste foge distoa muito do valor real.

```{r fig.show='hide'}

full_series <- rbind(Cl(ticker), Cl(ticker_val))
means_dbd <- numeric(n_obs)
lower_quantile_dbd <- numeric(n_obs)
upper_quantile_dbd <- numeric(n_obs)
for (i in 0:(n_obs - 1)) {
    last_value <- full_series[n_train_obs + i, ]
    partial_series <- full_series[1:(n_train_obs + i), ]
    partial_parameters <- estimators(partial_series, 1 / nrow(partial_series))
    partial_mu <- partial_parameters[1]
    partial_sigma2 <- partial_parameters[2]
    partial_sigma <- sqrt(partial_sigma2)
    next_day_sim <- purrr::map_vec(
        1:num_simulations,
        ~ rgbm(1, partial_mu, partial_sigma, last_value)
    )

    means_dbd[i + 1] <- mean(next_day_sim)
    lower_quantile_dbd[i + 1] <- quantile(next_day_sim, probs = c(0.05))
    upper_quantile_dbd[i + 1] <- quantile(next_day_sim, probs = c(0.95))
}

means_dbd_xts <- xts::xts(means_dbd, order.by = index(ticker_val))
lower_dbd_xts <- xts::xts(lower_quantile_dbd, order.by = index(ticker_val))
upper_dbd_xts <- xts::xts(upper_quantile_dbd, order.by = index(ticker_val))

### Plot true path vs simmulated path
plots_title <- glue("Simmulation path for {ticker_name}")
plots_ylim <- c(
    min(means_dbd, Cl(full_series), lower_quantile_dbd, upper_quantile_dbd),
    max(means_dbd, Cl(full_series), lower_quantile_dbd, upper_quantile_dbd)
)
plots_xlim <- c(index(ticker)[1], xts::last(index(ticker_val)))

plot(blank_xts, ylim = plots_ylim, type = "n", main = plots_title)
lines(Cl(ticker))
lines(means_dbd_xts, col = "red", lwd = 2)
lines(Cl(ticker_val), col = "royalblue", lwd = 2)
lines(lower_dbd_xts, col = "#ff5959")
```
```{r fig.cap="\\label{fig:mc_dbd}Gráfico de linhas da simulação de Monte Carlo com modelos ajustados diariamente para preço de fechamento de PETR4 em 2025 contra seu preço real."}
lines(upper_dbd_xts, col = "#ff5959")
```

# Conclusão